// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> storeHistory(
      {required String path, required DataStruct history, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_box_autoadd_data_struct(history);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_store_history(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kStoreHistoryConstMeta,
      argValues: [path, history],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStoreHistoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "store_history",
        argNames: ["path", "history"],
      );

  Future<DataStruct> getHistroy({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_histroy(port_, arg0),
      parseSuccessData: _wire2api_data_struct,
      constMeta: kGetHistroyConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetHistroyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_histroy",
        argNames: ["path"],
      );

  String dartCalculate({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dart_calculate(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDartCalculateConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDartCalculateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dart_calculate",
        argNames: ["input"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (Expr, String) _wire2api___record__expr_String(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_expr(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  (ExprType, String) _wire2api___record__expr_type_String(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_expr_type(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  DataStruct _wire2api_data_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DataStruct(
      currentExpr: _wire2api_expr(arr[0]),
      historyExpr: _wire2api_list___record__expr_String(arr[1]),
    );
  }

  Expr _wire2api_expr(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Expr(
      exprList: _wire2api_list___record__expr_type_String(arr[0]),
      lBracketCount: _wire2api_i64(arr[1]),
      rBracketCount: _wire2api_i64(arr[2]),
    );
  }

  ExprType _wire2api_expr_type(dynamic raw) {
    return ExprType.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<(Expr, String)> _wire2api_list___record__expr_String(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api___record__expr_String).toList();
  }

  List<(ExprType, String)> _wire2api_list___record__expr_type_String(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api___record__expr_type_String)
        .toList();
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_expr_type(ExprType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
