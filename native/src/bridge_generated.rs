#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_store_history_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    history: impl Wire2Api<DataStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "store_history",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_history = history.wire2api();
            move |task_callback| store_history(api_path, api_history)
        },
    )
}
fn wire_get_histroy_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, DataStruct>(
        WrapInfo {
            debug_name: "get_histroy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| get_histroy(api_path)
        },
    )
}
fn wire_dart_calculate_impl(input: impl Wire2Api<String> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "dart_calculate",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_input = input.wire2api();
            Ok(dart_calculate(api_input))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<ExprType> for i32 {
    fn wire2api(self) -> ExprType {
        match self {
            0 => ExprType::Functon,
            1 => ExprType::LeftBracket,
            2 => ExprType::RightBracket,
            3 => ExprType::AddSub,
            4 => ExprType::MulDiv,
            5 => ExprType::RegularSymbol,
            6 => ExprType::Number,
            _ => unreachable!("Invalid variant for ExprType: {}", self),
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DataStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.current_expr.into_into_dart().into_dart(),
            self.history_expr.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DataStruct {}
impl rust2dart::IntoIntoDart<DataStruct> for DataStruct {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Expr {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.expr_list.into_into_dart().into_dart(),
            self.l_bracket_count.into_into_dart().into_dart(),
            self.r_bracket_count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Expr {}
impl rust2dart::IntoIntoDart<Expr> for Expr {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ExprType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Functon => 0,
            Self::LeftBracket => 1,
            Self::RightBracket => 2,
            Self::AddSub => 3,
            Self::MulDiv => 4,
            Self::RegularSymbol => 5,
            Self::Number => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExprType {}
impl rust2dart::IntoIntoDart<ExprType> for ExprType {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
